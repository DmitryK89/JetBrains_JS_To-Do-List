type: edu
files:
- name: src/index.html
  visible: true
  text: |
    <!doctype html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>Document</title>
    </head>
    <body>

    </body>
    </html>
  learner_created: false
- name: test/test.js
  visible: false
  text: |
    const puppeteer = require('puppeteer');
    const path = require('path');
    // '..' since we're in the test/ subdirectory; learner is supposed to have src/index.html
    const pagePath = 'file://' + path.resolve(__dirname, '../src/index.html');
    const hs = require('hs-test-web');
    const sleep = (ms) => new Promise(res => setTimeout(res, ms));

    async function stageTest() {

        const browser = await puppeteer.launch({
            headless: false,
            defaultViewport: null,
            args: ['--start-maximized', '--disable-infobar'],
            ignoreDefaultArgs: ['--enable-automation']
        });

        const page = await browser.newPage();
        await page.goto(pagePath);

        await sleep(1000);

        let result = await hs.testPage(page,
            // Test #1 - Check title
            () => {
                if (document.title !== 'To-Do List') {
                    return hs.wrong("The title of the page should be 'To-Do List'")
                }
                return hs.correct();
            },

            // Test #2 - Check elements
            () => {
                const inputField = document.getElementById("input-task")
                if (inputField === null || inputField.tagName !== 'INPUT')
                    return hs.wrong("Can't find input field with id '#input-task'")

                const addButton = document.getElementById("add-task-button")
                if (addButton === null || addButton.tagName !== 'BUTTON')
                    return hs.wrong("Can't find button with id '#add-task-button'")

                this.taskList = document.getElementById("task-list")
                if (this.taskList === null || this.taskList.tagName !== 'UL')
                    return hs.wrong("Can't find <ul> tag with id '#task-list'")

                return hs.correct();
            },

            // Test #3 - Check each task in task list
            () => {

                const tasks = this.taskList.getElementsByTagName("li")
                if (tasks.length !== 3)
                    return hs.wrong("Inside the <ul> tag should be 3 <li> elements!")

                for (let task of tasks) {
                    const checkbox = task.querySelector("input[type=checkbox]")
                    if (checkbox === null)
                        return hs.wrong("Inside each <li> tag should one <input> tag with 'checkbox' type")

                    const taskName = task.querySelector("span.task")
                    if (taskName === null)
                        return hs.wrong("Inside each <li> tag should one <spane> tag with 'task' class")

                    const deleteButton = task.querySelector("button.delete-btn")
                    if (deleteButton === null)
                        return hs.wrong("Inside each <li> tag should one <button> tag with 'delete-btn' class")
                }

                return hs.correct();
            },

            // Test #4 - Test adding new task
            () => {

                const inputField = document.getElementById("input-task")
                if (inputField.tagName !== 'INPUT')
                    return hs.wrong("Can't find input field with id '#input-task'")

                inputField.value = "New task for the test purpose"

                const addButton = document.getElementById("add-task-button")
                if (addButton.tagName !== 'BUTTON')
                    return hs.wrong("Can't find button with id '#add-task-button'")

                addButton.click()

                const tasks = this.taskList.getElementsByTagName("li")
                if (tasks.length !== 4)
                    return hs.wrong("After adding a new task to the To-Do list, there should be 4 <li> tags inside the <ul> list")

                for (let task of tasks) {

                    const taskName = task.querySelector("span.task")
                    if (taskName === null)
                        return hs.wrong("Inside each <li> tag should one <spane> tag with 'task' class")

                    if (taskName.textContent === "New task for the test purpose") {
                        return hs.correct()
                    }
                }

                return hs.wrong("Can't find task with name 'New task for the test purpose'.\n" +
                    "The task name should be placed in <span> tag with class 'task'!")
            },

            // Test #5 - Deleting task
            () => {

                let tasks = this.taskList.getElementsByTagName("li")

                for (let task of tasks) {
                    const taskName = task.querySelector("span.task")
                    if (taskName === null)
                        return hs.wrong("Inside each <li> tag should one <spane> tag with 'task' class")

                    if (taskName.textContent === "New task for the test purpose") {
                        const deleteButton = task.querySelector("button.delete-btn")
                        if (deleteButton === null)
                            return hs.wrong("Inside each <li> tag should one <button> tag with 'delete-btn' class")
                        deleteButton.click()
                        break
                    }
                }

                tasks = this.taskList.getElementsByTagName("li")

                for (let task of tasks) {
                    const taskName = task.querySelector("span.task")
                    if (taskName === null)
                        return hs.wrong("Inside each <li> tag should one <span> tag with 'task' class")

                    if (taskName.textContent === "New task for the test purpose") {
                        return hs.wrong("After deleting a task with name 'New task for the test purpose' it is still in the task list!")
                    }
                }

                return hs.correct()
            },

            // Test #6 - Check completed tasks
            async () => {

                const tasks = this.taskList.getElementsByTagName("li")

                if (tasks.length !== 3)
                    return hs.wrong("After adding a new task to the To-Do list, there should be 3 <li> tags inside the <ul> list")

                const task = tasks[1]

                const checkbox = task.querySelector("input[type=checkbox]")

                if (checkbox.checked) {
                    return hs.wrong("By default a checkbox should be unchecked!")
                }

                checkbox.click()

                let taskName = task.querySelector("span.task")
                if (taskName === null)
                    return hs.wrong("Inside each <li> tag should be one <span> tag with 'task' class")

                if (!window.getComputedStyle(taskName).textDecoration.includes("line-through")) {
                    return hs.wrong("If checkbox is checked the task name should be crossed out.\n" +
                        "The span tag with task name should have 'text-decoration: line-through' style")
                }

                checkbox.click()

                if (window.getComputedStyle(taskName).textDecoration.includes("line-through")) {
                    return hs.wrong("If checkbox is unchecked the task name shouldn't be crossed out.\n" +
                        "The span tag with task name shouldn't have 'text-decoration: line-through' style")
                }

                return hs.correct()
            }
        );

        await browser.close();
        return result;
    }


    jest.setTimeout(30000);
    test("Test stage", async () => {
            let result = await stageTest();
            if (result['type'] === 'wrong') {
                fail(result['message']);
            }
        }
    );
  learner_created: false
- name: src/remove.svg
  visible: true
  text: "<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\n<!-- Generator: Adobe Illustrator\
    \ 18.1.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<svg version=\"\
    1.1\" id=\"Capa_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"\
    \ x=\"0px\" y=\"0px\"\n\t viewBox=\"0 0 27.965 27.965\" style=\"enable-background:new\
    \ 0 0 27.965 27.965;\" xml:space=\"preserve\" width=\"20px\" height=\"20px\">\n\
    <g>\n\t<g id=\"c142_x\">\n\t\t<path fill=\"red\" d=\"M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982\n\
    \t\t\tC27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78\n\
    \t\t\tl-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782\n\
    \t\t\tc0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z\"\
    />\n\t</g>\n\t<g id=\"Capa_1_104_\">\n\t</g>\n</g>\n\t<g>\n</g>\n\t<g>\n</g>\n\
    \t<g>\n</g>\n\t<g>\n</g>\n\t<g>\n</g>\n\t<g>\n</g>\n\t<g>\n</g>\n\t<g>\n</g>\n\
    \t<g>\n</g>\n\t<g>\n</g>\n\t<g>\n</g>\n\t<g>\n</g>\n\t<g>\n</g>\n\t<g>\n</g>\n\
    \t<g>\n</g>\n</svg>\n"
  learner_created: true
- name: src/script.js
  visible: true
  text: |-
    const list = document.getElementById("task-list");
    const input = document.getElementById("input-task");

    document.getElementById("add-task-button").addEventListener('click', function (){
        const text = input.value;

        let checkbox = document.createElement('input')
        checkbox.setAttribute('type', 'checkbox');
        checkbox.setAttribute('class', 'checkbox');

        let span = document.createElement('span');
        span.setAttribute('class', 'task');
        span.innerHTML = text;

        let object = document.createElement('object');
        object.setAttribute('type', 'image/svg+xml');
        object.setAttribute('data', 'remove.svg');

        let button = document.createElement('button');
        button.setAttribute('class', 'delete-btn');
        button.appendChild(object);
        button.addEventListener('click', deleteItem);

        let li = document.createElement('li');
        li.appendChild(checkbox);
        li.appendChild(span);
        li.appendChild(button);

        list.appendChild(li);

        input.value = "";
    });

    const buttons = document.querySelectorAll(".delete-btn")
    const length = buttons.length;
    function deleteItem (e){
        e.currentTarget.parentNode.remove()
    }
    for (let i = 0; i < length ; i++)
    {
        debugger;
        buttons[i].addEventListener('click', deleteItem);
    }
  learner_created: true
- name: src/styles.css
  visible: true
  text: |
    :root {
        --main-color: #B466C4B5;
    }
    #task-list {
        list-style-type: none;
    }

    #add-task-button {
        font-family: "Arial";
        font-size: 15px;

        width: auto;
        height: 25px;

        border-width: 0px;
        background-color: var(--main-color);
        color: white;
    }

    #input-task {
        width: 200px;
        border: none;
        border-bottom: 1px solid var(--main-color);

        font-family: "Arial";
        font-size: 20px;
    }

    .delete-btn {
        background-color: white;
        border: none;
        width: 25px;
        height: 10px;
        float: right;
    }

    .task {
        font-family: "Arial";
        font-size: 20px;
    }

    h1 {
        font-family: "Arial";
        font-size: 25px;
        text-align: center;
    }

    li {
       margin: 20px;
       width: 100%;
    }

    .todolist {
        display: flex;
        flex-direction: column;
        justify-content: stretch;
        align-items: center;

        border: var(--main-color) 1px solid;
        border-radius: 10px;

        width: 500px;
        margin: 20px auto;
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/13196#comment
status: Solved
feedback:
  message: Congratulations!
  time: Thu, 16 Dec 2021 16:39:00 UTC
record: 4

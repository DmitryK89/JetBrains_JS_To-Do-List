type: edu
files:
- name: src/index.html
  visible: true
  text: |
    <!doctype html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>Document</title>
    </head>
    <body>

    </body>
    </html>
  learner_created: false
- name: test/test.js
  visible: false
  text: |
    const puppeteer = require('puppeteer');
    const path = require('path');
    // '..' since we're in the test/ subdirectory; learner is supposed to have src/index.html
    const pagePath = 'file://' + path.resolve(__dirname, '../src/index.html');
    const hs = require('hs-test-web');
    const sleep = (ms) => new Promise(res => setTimeout(res, ms));

    async function stageTest() {

        const browser = await puppeteer.launch({
            headless: false,
            defaultViewport: null,
            args: ['--start-maximized', '--disable-infobar'],
            ignoreDefaultArgs: ['--enable-automation'],
        });

        const page = await browser.newPage();
        await page.coverage.startCSSCoverage();
        await page.goto(pagePath);

        await sleep(1000);

        let result = await hs.testPage(page,
            // Test #1 - Check title
            () => {
                if (document.title !== 'To-Do List') {
                    return hs.wrong("The title of the page should be 'To-Do List'")
                }

                return hs.correct();
            },

            // Test #2 - delete all the tasks
            async () => {

                let taskList = document.getElementById("task-list")

                if (taskList === null || taskList.tagName !== 'UL')
                    return hs.wrong("Can't find <ul> tag with id '#task-list'")

                let tasks = taskList.getElementsByTagName("li")

                const numberOfTasks = tasks.length;
                let counter = 0;

                while (true) {

                    if (counter > numberOfTasks) {
                        return hs.wrong("Looks like after deleting a task it is not removed from the task list!")
                    }

                    const deleteButton = document.querySelector("button.delete-btn")
                    if (deleteButton === null) {
                        break
                    }
                    deleteButton.click()

                    counter++
                }

                taskList = document.getElementById("task-list")
                if (taskList === null || taskList.tagName !== 'UL')
                    return hs.wrong("After deleting the tasks can't find <ul> tag with id '#task-list'")

                tasks = taskList.getElementsByTagName("li")

                if (tasks.length !== 0) {
                    return hs.wrong("After deleting all the tasks there shouldn't be any <li> tag")
                }

                return hs.correct()
            },

            // Test #3 - adding tasks
            async () => {
                const tasksName = ['First task', 'Second task', 'Third task', 'Fourth task', 'Fifth task']

                const inputField = document.getElementById("input-task")
                if (inputField === null || inputField.tagName !== 'INPUT')
                    return hs.wrong("Can't find input field with id '#input-task'")

                const addButton = document.getElementById("add-task-button")
                if (addButton === null || addButton.tagName !== 'BUTTON')
                    return hs.wrong("Can't find button with id '#add-task-button'")

                const taskList = document.getElementById("task-list")
                if (taskList === null || taskList.tagName !== 'UL')
                    return hs.wrong("Can't find <ul> tag with id '#task-list'")

                let currentTaskCounter = 1;

                for (let taskName of tasksName) {
                    inputField.value = taskName
                    addButton.click()

                    const tasks = taskList.getElementsByTagName("li")

                    if (tasks.length !== currentTaskCounter) {
                        return hs.wrong("After adding a task number of the <li> tags is not increased!")
                    }

                    currentTaskCounter++
                }

                return hs.correct()
            },

            // Test #4 - Check each task in task list
            () => {

                const taskList = document.getElementById("task-list")
                if (taskList.tagName !== 'UL')
                    return hs.wrong("Can't find <ul> tag with id '#task-list'")

                const tasks = taskList.getElementsByTagName("li")
                if (tasks.length !== 5)
                    return hs.wrong("Inside the <ul> tag should be 5 <li> elements after adding 5 tasks!")

                for (let task of tasks) {
                    const checkbox = task.querySelector("input[type=checkbox]")
                    if (checkbox === null)
                        return hs.wrong("Inside each <li> tag should one <input> tag with 'checkbox' type")

                    const taskName = task.querySelector("span.task")
                    if (taskName === null)
                        return hs.wrong("Inside each <li> tag should one <spane> tag with 'task' class")

                    const deleteButton = task.querySelector("button.delete-btn")
                    if (deleteButton === null)
                        return hs.wrong("Inside each <li> tag should one <button> tag with 'delete-btn' class")
                }


                return hs.correct();
            },

            // Test #5 - Check completed task
            async () => {
                const taskList = document.getElementById("task-list")
                if (taskList.tagName !== 'UL')
                    return hs.wrong("Can't find <ul> tag with id '#task-list'")

                let tasks = taskList.getElementsByTagName("li")

                for (let task of tasks) {
                    const taskName = task.querySelector("span.task")

                    if (taskName === null)
                        return hs.wrong("Inside each <li> tag should one <spane> tag with 'task' class")

                    if (taskName.textContent === 'Third task') {
                        const checkbox = task.querySelector("input[type=checkbox]")
                        checkbox.click()
                        break;
                    }
                }

                tasks = taskList.getElementsByTagName("li")

                for (let task of tasks) {

                    const taskName = task.querySelector("span.task")

                    if (taskName === null) {
                        return hs.wrong("After marking a task as completed can not find a <span> tag with 'task' class inside <li> tag")
                    }

                    if (taskName.textContent === 'Third task') {
                        let taskName = task.querySelector("span.task")
                        if (taskName === null)
                            return hs.wrong("Inside each <li> tag should be one <span> tag with 'task' class")

                        if (!taskName.style.textDecoration.includes("line-through") &&
                            !getComputedStyle(taskName).textDecoration.includes("line-through")) {
                            return hs.wrong("If checkbox is checked the task name should be crossed out.\n" +
                                "The span tag with task name should have 'text-decoration: line-trough' style")
                        }

                        return hs.correct()
                    }
                }

                return hs.wrong("Can't find task with name 'Third task' after it was added!")
            }
        );

        if (result.type === 'wrong') {
            await browser.close();
            return result;
        }

        await page.goto(pagePath);

        result = await hs.testPage(page,

            // Test #6(1) - Test task list after reloading the page
            async () => {

                const taskList = document.getElementById("task-list")
                if (taskList.tagName !== 'UL')
                    return hs.wrong("Can't find <ul> tag with id '#task-list'")

                const tasks = taskList.getElementsByTagName("li")

                if (tasks.length !== 5) {
                    return hs.wrong("Looks like you didn't store the tasks in the local storage.\n" +
                        "After refreshing the page expected 5 tasks!")
                }

                for (let task of tasks) {
                    const checkbox = task.querySelector("input[type=checkbox]")
                    if (checkbox === null)
                        return hs.wrong("Inside each <li> tag should one <input> tag with 'checkbox' type")

                    const taskName = task.querySelector("span.task")
                    if (taskName === null)
                        return hs.wrong("Inside each <li> tag should one <spane> tag with 'task' class")

                    const deleteButton = task.querySelector("button.delete-btn")
                    if (deleteButton === null)
                        return hs.wrong("Inside each <li> tag should one <button> tag with 'delete-btn' class")
                }

                return hs.correct()
            }
        );

        await browser.close();
        return result;
    }

    jest.setTimeout(30000);
    test("Test stage", async () => {
            let result = await stageTest();
            if (result['type'] === 'wrong') {
                fail(result['message']);
            }
        }
    );
  learner_created: false
- name: src/remove.svg
  visible: true
  text: "<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>\n<!-- Generator: Adobe Illustrator\
    \ 18.1.1, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n<svg version=\"\
    1.1\" id=\"Capa_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"\
    \ x=\"0px\" y=\"0px\"\n\t viewBox=\"0 0 27.965 27.965\" style=\"enable-background:new\
    \ 0 0 27.965 27.965;\" xml:space=\"preserve\" width=\"20px\" height=\"20px\">\n\
    <g>\n\t<g id=\"c142_x\">\n\t\t<path fill=\"red\" d=\"M13.98,0C6.259,0,0,6.261,0,13.983c0,7.721,6.259,13.982,13.98,13.982c7.725,0,13.985-6.262,13.985-13.982\n\
    \t\t\tC27.965,6.261,21.705,0,13.98,0z M19.992,17.769l-2.227,2.224c0,0-3.523-3.78-3.786-3.78c-0.259,0-3.783,3.78-3.783,3.78\n\
    \t\t\tl-2.228-2.224c0,0,3.784-3.472,3.784-3.781c0-0.314-3.784-3.787-3.784-3.787l2.228-2.229c0,0,3.553,3.782,3.783,3.782\n\
    \t\t\tc0.232,0,3.786-3.782,3.786-3.782l2.227,2.229c0,0-3.785,3.523-3.785,3.787C16.207,14.239,19.992,17.769,19.992,17.769z\"\
    />\n\t</g>\n\t<g id=\"Capa_1_104_\">\n\t</g>\n</g>\n\t<g>\n</g>\n\t<g>\n</g>\n\
    \t<g>\n</g>\n\t<g>\n</g>\n\t<g>\n</g>\n\t<g>\n</g>\n\t<g>\n</g>\n\t<g>\n</g>\n\
    \t<g>\n</g>\n\t<g>\n</g>\n\t<g>\n</g>\n\t<g>\n</g>\n\t<g>\n</g>\n\t<g>\n</g>\n\
    \t<g>\n</g>\n</svg>\n"
  learner_created: true
- name: src/script.js
  visible: true
  text: |-
    const list = document.getElementById("task-list");
    const input = document.getElementById("input-task");

    document.getElementById("add-task-button").addEventListener('click', function (){

        const text = input.value;
        addTaskToUi(text);
        saveToLocalStorage();
        input.value = "";
    });

    function addTaskToUi(text) {

        let checkbox = document.createElement('input')
        checkbox.setAttribute('type', 'checkbox');
        checkbox.setAttribute('class', 'checkbox');

        let span = document.createElement('span');
        span.setAttribute('class', 'task');
        span.innerHTML = text;

        let object = document.createElement('object');
        object.setAttribute('type', 'image/svg+xml');
        object.setAttribute('data', 'remove.svg');

        let button = document.createElement('button');
        button.setAttribute('class', 'delete-btn');
        button.appendChild(object);
        button.addEventListener('click', deleteItem);

        let li = document.createElement('li');
        li.appendChild(checkbox);
        li.appendChild(span);
        li.appendChild(button);

        list.appendChild(li);
    }

    function saveToLocalStorage() {
        let tasks = list.querySelectorAll(".task");
        debugger;
    }

    /*Delete buttons functionality*/
    const buttons = document.querySelectorAll(".delete-btn")
    const buttonsLength = buttons.length;
    for (let i = 0; i < buttonsLength ; i++)
    {
        buttons[i].addEventListener('click', deleteItem);
    }
    function deleteItem (e){
        e.currentTarget.parentNode.remove()
    }
    /*Checkbox buttons functionality*/
    const checkbox = document.querySelectorAll(".checkbox")
    const checkboxLength = checkbox.length;
    for (let i = 0; i < checkboxLength ; i++)
    {
        checkbox[i].addEventListener('change', checkItem);
    }
    function checkItem (e){
        const  li = e.currentTarget.parentNode;
        const span = li.querySelector(".task");
        span.classList.toggle('task-checked');
    }
  learner_created: true
- name: src/styles.css
  visible: true
  text: |+
    :root {
        --main-color: #B466C4B5;
    }
    #task-list {
        list-style-type: none;
    }

    #add-task-button {
        font-family: "Arial";
        font-size: 15px;

        width: auto;
        height: 25px;

        border-width: 0px;
        background-color: var(--main-color);
        color: white;
    }

    #input-task {
        width: 200px;
        border: none;
        border-bottom: 1px solid var(--main-color);

        font-family: "Arial";
        font-size: 20px;
    }

    .delete-btn {
        background-color: white;
        border: none;
        width: 25px;
        height: 10px;
        float: right;
    }

    .task {
        font-family: "Arial";
        font-size: 20px;
    }

    .task-checked {
        text-decoration: line-through;
    }

    h1 {
        font-family: "Arial";
        font-size: 25px;
        text-align: center;
    }

    li {
       margin: 20px;
       width: 100%;
    }

    .todolist {
        display: flex;
        flex-direction: column;
        justify-content: stretch;
        align-items: center;

        border: var(--main-color) 1px solid;
        border-radius: 10px;

        width: 500px;
        margin: 20px auto;
    }


  learner_created: true
feedback_link: https://hyperskill.org/learn/step/13197#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Sat, 18 Dec 2021 04:03:15 UTC
record: -1
